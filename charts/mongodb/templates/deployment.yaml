apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mongodb.fullname" . }}
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "mongodb.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mongodb.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mongodb.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ["--dbpath","/data/db"]
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "mongodb.secretNameRoot" . }}
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mongodb.secretNameRoot" . }}
                  key: password
            - name: MONGO_INITDB_SVC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "mongodb.secretNameSvc" . }}
                  key: username
            - name: MONGO_INITDB_SVC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mongodb.secretNameSvc" . }}
                  key: password
          ports:
            - name: mongo
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          # livenessProbe:
          #   exec:
          #     command:
          #       - mongosh
          #       - --eval
          #       - "db.adminCommand('ping')"
          #   failureThreshold: 3
          #   periodSeconds: 20
          #   successThreshold: 1
          #   timeoutSeconds: 10
          # readinessProbe:
          #   exec:
          #     command:
          #       - mongosh
          #       - --eval
          #       - "db.adminCommand('ping')"
          #   failureThreshold: 3
          #   periodSeconds: 20
          #   successThreshold: 1
          #   timeoutSeconds: 10
          volumeMounts: 
            - name: mongo-data-dir
              mountPath: /data/db
            - name: init-svc-user
              mountPath: /docker-entrypoint-initdb.d/
              readOnly: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: mongo-data-dir
          persistentVolumeClaim:
            {{- toYaml .Values.persistence | nindent 14 }}
        - name: init-svc-user
          configMap:
            name: {{ include "mongodb.initConfigName" . }}
            items:
            - key: svc-user.js
              path: svc-user.js
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
